import java.util.*;
public class UNO 
{
    private int handSize = 7;
    private int curPlayer;
    private ArrayList<Card> drawPile;
    private ArrayList<Card> discardPile;
    private ArrayList<Card> player1Hand;
    private ArrayList<Card> player2Hand;

    public UNO() 
    {
        drawPile = new ArrayList<>();
        discardPile = new ArrayList<>();
        player1Hand = new ArrayList<>();
        player2Hand = new ArrayList<>();

        // Creates deck
        for (int i = 0; i <= 9; i++) 
        {
            for (int j = 0; j < 4; j++) 
            {
                Card card = new Card(i, j);
                drawPile.add(card);
            }
        }

        // Shuffles deck
        Collections.shuffle(drawPile);

        // Deals Cards
        player1Hand.addAll(drawCards(handSize));
        player2Hand.addAll(drawCards(handSize));

        // Places card on the discard pile
        discardPile.add(drawPile.remove(drawPile.size() - 1));

        // Makes P1 go first
        curPlayer = 1;
    }

    public void play() 
    {
        Scanner scanner = new Scanner(System.in);
        boolean gameEnded = false;

        while (gameEnded == false) 
        {
            // Prints the hand of both players and the discard pile
            System.out.println("Discard Pile: " + discardPile);
            System.out.println("Player 1 Hand: " + player1Hand);
            System.out.println("Player 2 Hand: " + player2Hand);

            // curPlayer's hamd
            ArrayList<Card> currentHand;
            if (curPlayer == 1) 
            {
                currentHand = player1Hand;
            } 
            else 
            {
                currentHand = player2Hand;
            }

            // Checks there are valid moves
            boolean hasValidMove = false;
            for (Card card : currentHand) 
            {
                if (card.matches(discardPile.get(discardPile.size() - 1))) 
                {
                    hasValidMove = true;
                    break;
                }
            }

            if (hasValidMove) 
            {
                // Asks player to play a valid card or to draw a card
                System.out.print("Player " + curPlayer + ", enter the index (starts at 0) of the card to play or -1 to draw a card: ");
                int choice = scanner.nextInt();

                if (choice == -1) 
                {
                    // Draws card to see if its valid
                    ArrayList<Card> drawnCards = drawCards(1);
                    currentHand.addAll(drawnCards);

                    for (Card card : drawnCards) 
                    {
                        if (card.matches(discardPile.get(discardPile.size() - 1))) 
                        {
                            // The turn automatically ends if the card is valid
                            discardPile.add(card);
                            currentHand.remove(card);
                            break;
                        }
                    }
                    switchPlayers();
                } 
                else 
                {
                    Card selectedCard = currentHand.get(choice);
                    if (selectedCard.matches(discardPile.get(discardPile.size() - 1))) 
                    {
                        discardPile.add(selectedCard);
                        currentHand.remove(selectedCard);

                        // Checks if won
                        if (currentHand.size() == 0) 
                        {
                            System.out.println("Player " + curPlayer + " has won!");
                            gameEnded = true;
                            break;
                        }
                        switchPlayers();
                    } 
                    else 
                    {
                        System.out.println("Invalid move.");
                    }
                }
            } 
            else 
            {
                // If player can't play a card then they must draw a card
                ArrayList<Card> drawnCards = drawCards(1);
                currentHand.addAll(drawnCards);

                // Checks if the drawn card is valid 
                boolean canPlayDrawnCard = false;
                for (Card card : drawnCards) 
                {
                    if (card.matches(discardPile.get(discardPile.size() - 1))) 
                    {
                        canPlayDrawnCard = true;
                        discardPile.add(card);
                        currentHand.remove(card);
                        break;
                    }
                }

                if (canPlayDrawnCard == false) 
                {
                    switchPlayers();
                }

                // Checks if player won 
                if (currentHand.size() == 0) 
                {
                    System.out.println("Player " + curPlayer + " has won!");
                    gameEnded = true;
                    break;
                }
            }
        }
    }

    private ArrayList<Card> drawCards(int numCards) 
    {
        ArrayList<Card> cards = new ArrayList<>();
        for (int i = 0; i < numCards; i++) 
        {
            if (drawPile.isEmpty()) 
            {
                // Shuffles the discard pile when no more in the draw pile
                Collections.shuffle(discardPile);
                drawPile.addAll(discardPile);
                discardPile.clear();
            }
            cards.add(drawPile.remove(drawPile.size() - 1));
        }
        return cards;
    }

    private void switchPlayers() 
    {
        if (curPlayer == 1) 
        {
            curPlayer = 2;
        } 
        else 
        {
            curPlayer = 1;
        }
    }

    public static void main(String[] args) 
    {
        UNO game = new UNO();
        game.play();
    }
}
